{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.19.5.34762",
      "templateHash": "2233904060189882422"
    }
  },
  "parameters": {
    "Location": {
      "type": "string"
    }
  },
  "variables": {
    "$fxv#0": {
      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
      "contentVersion": "1.0.0.0",
      "metadata": {
        "_generator": {
          "name": "bicep",
          "version": "0.19.5.34762",
          "templateHash": "16145730358908346093"
        }
      },
      "parameters": {
        "diskEncryptionSetResourceId": {
          "type": "string",
          "metadata": {
            "description": "AVD disk encryption set resource ID to enable server side encyption."
          }
        },
        "subnetId": {
          "type": "string",
          "metadata": {
            "description": "AVD subnet ID."
          }
        },
        "sessionHostLocation": {
          "type": "string",
          "metadata": {
            "description": "Location where to deploy compute services."
          }
        },
        "timeZone": {
          "type": "string",
          "metadata": {
            "description": "Virtual machine time zone."
          }
        },
        "sessionHostNamePrefix": {
          "type": "string",
          "defaultValue": "",
          "metadata": {
            "description": "AVD Session Host prefix."
          }
        },
        "availabilitySetNamePrefix": {
          "type": "string",
          "metadata": {
            "description": "Availablity Set name."
          }
        },
        "maxAvailabilitySetMembersCount": {
          "type": "int",
          "metadata": {
            "description": "Availablity Set max members."
          }
        },
        "computeObjectsRgName": {
          "type": "string",
          "metadata": {
            "description": "Resource Group name for the session hosts"
          }
        },
        "serviceObjectsRgName": {
          "type": "string",
          "metadata": {
            "description": "Resource Group name for the session hosts"
          }
        },
        "subscriptionId": {
          "type": "string",
          "metadata": {
            "description": "AVD workload subscription ID, multiple subscriptions scenario."
          }
        },
        "sessionHostsCount": {
          "type": "int",
          "defaultValue": 0,
          "metadata": {
            "description": "Quantity of session hosts to deploy"
          }
        },
        "sessionHostCountIndex": {
          "type": "int",
          "defaultValue": 0,
          "metadata": {
            "description": "The session host number to begin with for the deployment."
          }
        },
        "useAvailabilityZones": {
          "type": "bool",
          "metadata": {
            "description": "Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
          }
        },
        "encryptionAtHost": {
          "type": "bool",
          "metadata": {
            "description": "This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
          }
        },
        "sessionHostsSize": {
          "type": "string",
          "metadata": {
            "description": "Session host VM size."
          }
        },
        "securityType": {
          "type": "string",
          "metadata": {
            "description": "Specifies the securityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
          }
        },
        "secureBootEnabled": {
          "type": "bool",
          "metadata": {
            "description": "Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. securityType should be set to TrustedLaunch to enable UefiSettings."
          }
        },
        "vTpmEnabled": {
          "type": "bool",
          "metadata": {
            "description": "Specifies whether the virtual TPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  securityType should be set to TrustedLaunch to enable UefiSettings."
          }
        },
        "enableAcceleratedNetworking": {
          "type": "bool",
          "metadata": {
            "description": "Enable accelerated networking on the session host VMs."
          }
        },
        "sessionHostDiskType": {
          "type": "string",
          "metadata": {
            "description": "OS disk type for session host."
          }
        },
        "marketPlaceGalleryWindows": {
          "type": "object",
          "metadata": {
            "description": "Market Place OS image."
          }
        },
        "useSharedImage": {
          "type": "bool",
          "metadata": {
            "description": "Set to deploy image from Azure Compute Gallery."
          }
        },
        "imageTemplateDefinitionId": {
          "type": "string",
          "metadata": {
            "description": "Source custom image ID."
          }
        },
        "storageManagedIdentityResourceId": {
          "type": "string",
          "metadata": {
            "description": "Fslogix Managed Identity Resource ID."
          }
        },
        "vmLocalUserName": {
          "type": "string",
          "metadata": {
            "description": "Local administrator username."
          }
        },
        "identityDomainName": {
          "type": "string",
          "metadata": {
            "description": "AD domain name."
          }
        },
        "domainJoinUserName": {
          "type": "string",
          "metadata": {
            "description": "AVD session host domain join credentials."
          }
        },
        "identityServiceProvider": {
          "type": "string",
          "metadata": {
            "description": "Required, The service providing domain services for Azure Virtual Desktop."
          }
        },
        "createIntuneEnrollment": {
          "type": "bool",
          "metadata": {
            "description": "Required, Eronll session hosts on Intune."
          }
        },
        "wrklKvName": {
          "type": "string",
          "metadata": {
            "description": "Name of keyvault that contains credentials."
          }
        },
        "sessionHostOuPath": {
          "type": "string",
          "metadata": {
            "description": "OU path to join AVd VMs"
          }
        },
        "applicationSecurityGroupResourceId": {
          "type": "string",
          "metadata": {
            "description": "Application Security Group for the session hosts."
          }
        },
        "hostPoolToken": {
          "type": "string",
          "metadata": {
            "description": "AVD host pool token."
          }
        },
        "hostPoolName": {
          "type": "string",
          "metadata": {
            "description": "AVD Host Pool name."
          }
        },
        "avdAgentPackageLocation": {
          "type": "string",
          "metadata": {
            "description": "Location for the AVD agent installation package."
          }
        },
        "createAvdFslogixDeployment": {
          "type": "bool",
          "metadata": {
            "description": "Deploy Fslogix setup."
          }
        },
        "fsLogixScriptFile": {
          "type": "string",
          "metadata": {
            "description": "FSlogix configuration script file name."
          }
        },
        "fsLogixScriptArguments": {
          "type": "string",
          "metadata": {
            "description": "Configuration arguments for FSlogix."
          }
        },
        "fslogixSharePath": {
          "type": "string",
          "metadata": {
            "description": "Path for the FSlogix share."
          }
        },
        "fslogixScriptUri": {
          "type": "string",
          "metadata": {
            "description": "URI for FSlogix configuration script."
          }
        },
        "tags": {
          "type": "object",
          "metadata": {
            "description": "Tags to be applied to resources"
          }
        },
        "alaWorkspaceResourceId": {
          "type": "string",
          "metadata": {
            "description": "Log analytics workspace for diagnostic logs."
          }
        },
        "diagnosticLogsRetentionInDays": {
          "type": "int",
          "metadata": {
            "description": "Diagnostic logs retention."
          }
        },
        "deployMonitoring": {
          "type": "bool",
          "metadata": {
            "description": "Deploy AVD monitoring resources and setings. (Default: true)"
          }
        },
        "time": {
          "type": "string",
          "defaultValue": "[[utcNow()]",
          "metadata": {
            "description": "Do not modify, used to set unique value for resource deployment."
          }
        },
        "ReplacementPlanDeployment": {
          "type": "bool",
          "defaultValue": false
        },
        "ReplacementPlanDeploymentSessionHostNames": {
          "type": "array",
          "defaultValue": []
        },
        "ImageReference": {
          "type": "object",
          "defaultValue": {}
        }
      },
      "variables": {
        "[string('copy')]": [
          {
            "name": "varSessionHostCalculatedNames",
            "count": "[[length(range(1, parameters('sessionHostsCount')))]",
            "input": "[[format('{0}-{1}', parameters('sessionHostNamePrefix'), padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex('varSessionHostCalculatedNames')], parameters('sessionHostCountIndex')), 3, '0'))]"
          }
        ],
        "varAllAvailabilityZones": "[[pickZones('Microsoft.Compute', 'virtualMachines', parameters('sessionHostLocation'), 3)]",
        "varNicDiagnosticMetricsToEnable": [
          "AllMetrics"
        ],
        "varManagedDisk": "[[if(empty(parameters('diskEncryptionSetResourceId')), createObject('storageAccountType', parameters('sessionHostDiskType')), createObject('diskEncryptionSet', createObject('id', parameters('diskEncryptionSetResourceId')), 'storageAccountType', parameters('sessionHostDiskType')))]",
        "varSessionHostNames": "[[if(parameters('ReplacementPlanDeployment'), parameters('ReplacementPlanDeploymentSessionHostNames'), variables('varSessionHostCalculatedNames'))]"
      },
      "resources": [
        {
          "[string('copy')]": {
            "name": "sessionHosts",
            "count": "[[length(variables('varSessionHostNames'))]"
          },
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('Session-Host-{0}-{1}', variables('varSessionHostNames')[copyIndex()], parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "name": {
                "value": "[[variables('varSessionHostNames')[copyIndex()]]"
              },
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "timeZone": {
                "value": "[[parameters('timeZone')]"
              },
              "userAssignedIdentities": "[[if(parameters('createAvdFslogixDeployment'), createObject('value', createObject(format('{0}', parameters('storageManagedIdentityResourceId')), createObject())), createObject('value', createObject()))]",
              "systemAssignedIdentity": "[[if(equals(parameters('identityServiceProvider'), 'AAD'), createObject('value', true()), createObject('value', false()))]",
              "availabilityZone": "[[if(parameters('useAvailabilityZones'), createObject('value', take(skip(variables('varAllAvailabilityZones'), mod(copyIndex(), length(variables('varAllAvailabilityZones')))), 1)), createObject('value', createArray()))]",
              "encryptionAtHost": {
                "value": "[[parameters('encryptionAtHost')]"
              },
              "availabilitySetResourceId": "[[if(parameters('useAvailabilityZones'), createObject('value', ''), createObject('value', format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Compute/availabilitySets/{2}-{3}', parameters('subscriptionId'), parameters('computeObjectsRgName'), parameters('availabilitySetNamePrefix'), padLeft(add(1, div(add(copyIndex(), parameters('sessionHostCountIndex')), parameters('maxAvailabilitySetMembersCount'))), 3, '0'))))]",
              "osType": {
                "value": "Windows"
              },
              "licenseType": {
                "value": "Windows_Client"
              },
              "vmSize": {
                "value": "[[parameters('sessionHostsSize')]"
              },
              "securityType": {
                "value": "[[parameters('securityType')]"
              },
              "secureBootEnabled": {
                "value": "[[parameters('secureBootEnabled')]"
              },
              "vTpmEnabled": {
                "value": "[[parameters('vTpmEnabled')]"
              },
              "imageReference": "[[if(parameters('useSharedImage'), createObject('value', json(format('{{''id'': ''{0}''}}', parameters('imageTemplateDefinitionId')))), createObject('value', parameters('marketPlaceGalleryWindows')))]",
              "osDisk": {
                "value": {
                  "createOption": "fromImage",
                  "deleteOption": "Delete",
                  "diskSizeGB": 128,
                  "managedDisk": "[[variables('varManagedDisk')]"
                }
              },
              "adminUsername": {
                "value": "[[parameters('vmLocalUserName')]"
              },
              "adminPassword": {
                "reference": {
                  "keyVault": {
                    "id": "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('subscriptionId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                  },
                  "secretName": "vmLocalUserPassword"
                }
              },
              "nicConfigurations": {
                "value": [
                  {
                    "nicSuffix": "nic-01-",
                    "deleteOption": "Delete",
                    "enableAcceleratedNetworking": "[[parameters('enableAcceleratedNetworking')]",
                    "ipConfigurations": "[[if(not(empty(parameters('applicationSecurityGroupResourceId'))), createArray(createObject('name', 'ipconfig01', 'subnetResourceId', parameters('subnetId'), 'applicationSecurityGroups', createArray(createObject('id', parameters('applicationSecurityGroupResourceId'))))), createArray(createObject('name', 'ipconfig01', 'subnetResourceId', parameters('subnetId'))))]"
                  }
                ]
              },
              "extensionDomainJoinPassword": {
                "reference": {
                  "keyVault": {
                    "id": "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('subscriptionId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                  },
                  "secretName": "domainJoinUserPassword"
                }
              },
              "extensionDomainJoinConfig": {
                "value": {
                  "enabled": "[[if(equals(parameters('identityServiceProvider'), 'AAD'), false(), true())]",
                  "settings": {
                    "name": "[[parameters('identityDomainName')]",
                    "ouPath": "[[if(not(empty(parameters('sessionHostOuPath'))), parameters('sessionHostOuPath'), null())]",
                    "user": "[[parameters('domainJoinUserName')]",
                    "restart": "true",
                    "options": "3"
                  }
                }
              },
              "extensionAadJoinConfig": {
                "value": {
                  "enabled": "[[if(equals(parameters('identityServiceProvider'), 'AAD'), true(), false())]",
                  "settings": "[[if(parameters('createIntuneEnrollment'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), createObject())]"
                }
              },
              "nicdiagnosticMetricsToEnable": "[[if(parameters('deployMonitoring'), createObject('value', variables('varNicDiagnosticMetricsToEnable')), createObject('value', createArray()))]",
              "diagnosticWorkspaceId": "[[if(parameters('deployMonitoring'), createObject('value', parameters('alaWorkspaceResourceId')), createObject('value', ''))]",
              "diagnosticLogsRetentionInDays": {
                "value": "[[parameters('diagnosticLogsRetentionInDays')]"
              },
              "tags": {
                "value": "[[parameters('tags')]"
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "4246964059709335904"
                }
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "defaultValue": "[[take(toLower(uniqueString(resourceGroup().name)), 10)]",
                  "metadata": {
                    "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
                  }
                },
                "vmComputerNamesTransformation": {
                  "type": "string",
                  "defaultValue": "none",
                  "allowedValues": [
                    "none",
                    "uppercase",
                    "lowercase"
                  ],
                  "metadata": {
                    "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
                  }
                },
                "vmSize": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Specifies the size for the VMs."
                  }
                },
                "encryptionAtHost": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                  }
                },
                "securityType": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                  }
                },
                "secureBootEnabled": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                  }
                },
                "vTpmEnabled": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                  }
                },
                "imageReference": {
                  "type": "object",
                  "metadata": {
                    "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                  }
                },
                "plan": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                  }
                },
                "osDisk": {
                  "type": "object",
                  "metadata": {
                    "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                  }
                },
                "dataDisks": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                  }
                },
                "ultraSSDEnabled": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                  }
                },
                "adminUsername": {
                  "type": "securestring",
                  "metadata": {
                    "description": "Required. Administrator username."
                  }
                },
                "adminPassword": {
                  "type": "securestring",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                  }
                },
                "customData": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                  }
                },
                "certificatesToBeInstalled": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                  }
                },
                "priority": {
                  "type": "string",
                  "defaultValue": "Regular",
                  "allowedValues": [
                    "Regular",
                    "Low",
                    "Spot"
                  ],
                  "metadata": {
                    "description": "Optional. Specifies the priority for the virtual machine."
                  }
                },
                "enableEvictionPolicy": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                  }
                },
                "maxPriceForLowPriorityVm": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                  }
                },
                "dedicatedHostId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                  }
                },
                "licenseType": {
                  "type": "string",
                  "defaultValue": "",
                  "allowedValues": [
                    "Windows_Client",
                    "Windows_Server",
                    ""
                  ],
                  "metadata": {
                    "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
                  }
                },
                "publicKeys": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                  }
                },
                "systemAssignedIdentity": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
                  }
                },
                "userAssignedIdentities": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The ID(s) to assign to the resource."
                  }
                },
                "bootDiagnostics": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                  }
                },
                "bootDiagnosticStorageAccountName": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                  }
                },
                "bootDiagnosticStorageAccountUri": {
                  "type": "string",
                  "defaultValue": "[[format('.blob.{0}/', environment().suffixes.storage)]",
                  "metadata": {
                    "description": "Optional. Storage account boot diagnostic base URI."
                  }
                },
                "proximityPlacementGroupResourceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Resource ID of a proximity placement group."
                  }
                },
                "availabilitySetResourceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                  }
                },
                "availabilityZone": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                  }
                },
                "nicConfigurations": {
                  "type": "array",
                  "metadata": {
                    "description": "Required. Configures NICs and PIPs."
                  }
                },
                "pipDiagnosticSettingsName": {
                  "type": "string",
                  "defaultValue": "[[format('{0}-diagnosticSettings', parameters('name'))]",
                  "metadata": {
                    "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                  }
                },
                "pipdiagnosticLogCategoriesToEnable": {
                  "type": "array",
                  "defaultValue": [
                    "allLogs"
                  ],
                  "allowedValues": [
                    "allLogs",
                    "DDoSProtectionNotifications",
                    "DDoSMitigationFlowLogs",
                    "DDoSMitigationReports"
                  ],
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                  }
                },
                "pipdiagnosticMetricsToEnable": {
                  "type": "array",
                  "defaultValue": [
                    "AllMetrics"
                  ],
                  "allowedValues": [
                    "AllMetrics"
                  ],
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed."
                  }
                },
                "nicDiagnosticSettingsName": {
                  "type": "string",
                  "defaultValue": "[[format('{0}-diagnosticSettings', parameters('name'))]",
                  "metadata": {
                    "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                  }
                },
                "nicdiagnosticMetricsToEnable": {
                  "type": "array",
                  "defaultValue": [
                    "AllMetrics"
                  ],
                  "allowedValues": [
                    "AllMetrics"
                  ],
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed."
                  }
                },
                "backupVaultName": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Recovery service vault name to add VMs to backup."
                  }
                },
                "backupVaultResourceGroup": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().name]",
                  "metadata": {
                    "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                  }
                },
                "backupPolicyName": {
                  "type": "string",
                  "defaultValue": "DefaultPolicy",
                  "metadata": {
                    "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                  }
                },
                "allowExtensionOperations": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                  }
                },
                "extensionDomainJoinPassword": {
                  "type": "securestring",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                  }
                },
                "extensionDomainJoinConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionAadJoinConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionAntiMalwareConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionMonitoringAgentConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "monitoringWorkspaceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
                  }
                },
                "extensionDependencyAgentConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionNetworkWatcherAgentConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionAzureDiskEncryptionConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
                  }
                },
                "extensionDSCConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionCustomScriptConfig": {
                  "type": "object",
                  "defaultValue": {
                    "enabled": false,
                    "fileData": []
                  },
                  "metadata": {
                    "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                  }
                },
                "extensionCustomScriptProtectedSetting": {
                  "type": "secureObject",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Any object that contains the extension specific protected settings."
                  }
                },
                "location": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().location]",
                  "metadata": {
                    "description": "Optional. Location for all resources."
                  }
                },
                "diagnosticLogsRetentionInDays": {
                  "type": "int",
                  "defaultValue": 365,
                  "maxValue": 365,
                  "minValue": 0,
                  "metadata": {
                    "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                  }
                },
                "diagnosticStorageAccountId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account."
                  }
                },
                "diagnosticWorkspaceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                  }
                },
                "diagnosticEventHubAuthorizationRuleId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "diagnosticEventHubName": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                  }
                },
                "lock": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  },
                  "allowedValues": [
                    "",
                    "CanNotDelete",
                    "ReadOnly"
                  ]
                },
                "roleAssignments": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "tags": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Tags of the resource."
                  }
                },
                "enableDefaultTelemetry": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                  }
                },
                "baseTime": {
                  "type": "string",
                  "defaultValue": "[[utcNow('u')]",
                  "metadata": {
                    "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                  }
                },
                "sasTokenValidityLength": {
                  "type": "string",
                  "defaultValue": "PT8H",
                  "metadata": {
                    "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                  }
                },
                "osType": {
                  "type": "string",
                  "allowedValues": [
                    "Windows",
                    "Linux"
                  ],
                  "metadata": {
                    "description": "Required. The chosen OS type."
                  }
                },
                "disablePasswordAuthentication": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Specifies whether password authentication should be disabled."
                  }
                },
                "provisionVMAgent": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                  }
                },
                "enableAutomaticUpdates": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                  }
                },
                "patchMode": {
                  "type": "string",
                  "defaultValue": "",
                  "allowedValues": [
                    "AutomaticByPlatform",
                    "AutomaticByOS",
                    "Manual",
                    "ImageDefault",
                    ""
                  ],
                  "metadata": {
                    "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
                  }
                },
                "patchAssessmentMode": {
                  "type": "string",
                  "defaultValue": "ImageDefault",
                  "allowedValues": [
                    "AutomaticByPlatform",
                    "ImageDefault"
                  ],
                  "metadata": {
                    "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
                  }
                },
                "timeZone": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                  }
                },
                "additionalUnattendContent": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
                  }
                },
                "winRM": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                  }
                },
                "configurationProfile": {
                  "type": "string",
                  "defaultValue": "",
                  "allowedValues": [
                    "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                    "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                    ""
                  ],
                  "metadata": {
                    "description": "Required. The configuration profile of automanage."
                  }
                }
              },
              "variables": {
                "[string('copy')]": [
                  {
                    "name": "publicKeysFormatted",
                    "count": "[[length(parameters('publicKeys'))]",
                    "input": {
                      "path": "[[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                      "keyData": "[[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                    }
                  }
                ],
                "vmComputerNameTransformed": "[[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
                "linuxConfiguration": {
                  "disablePasswordAuthentication": "[[parameters('disablePasswordAuthentication')]",
                  "ssh": {
                    "publicKeys": "[[variables('publicKeysFormatted')]"
                  },
                  "provisionVMAgent": "[[parameters('provisionVMAgent')]",
                  "patchSettings": "[[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]"
                },
                "windowsConfiguration": {
                  "provisionVMAgent": "[[parameters('provisionVMAgent')]",
                  "enableAutomaticUpdates": "[[parameters('enableAutomaticUpdates')]",
                  "patchSettings": "[[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]",
                  "timeZone": "[[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                  "additionalUnattendContent": "[[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                  "winRM": "[[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                },
                "accountSasProperties": {
                  "signedServices": "b",
                  "signedPermission": "r",
                  "signedExpiry": "[[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                  "signedResourceTypes": "o",
                  "signedProtocol": "https"
                },
                "identityType": "[[if(if(parameters('extensionAadJoinConfig').enabled, true(), parameters('systemAssignedIdentity')), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                "identity": "[[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
                "enableReferencedModulesTelemetry": false
              },
              "resources": [
                {
                  "condition": "[[parameters('enableDefaultTelemetry')]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "mode": "Incremental",
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "resources": []
                    }
                  }
                },
                {
                  "type": "Microsoft.Compute/virtualMachines",
                  "apiVersion": "2022-11-01",
                  "name": "[[parameters('name')]",
                  "location": "[[parameters('location')]",
                  "identity": "[[variables('identity')]",
                  "tags": "[[parameters('tags')]",
                  "zones": "[[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
                  "plan": "[[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                  "properties": {
                    "hardwareProfile": {
                      "vmSize": "[[parameters('vmSize')]"
                    },
                    "securityProfile": {
                      "encryptionAtHost": "[[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                      "securityType": "[[parameters('securityType')]",
                      "uefiSettings": "[[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                    },
                    "storageProfile": {
                      "[string('copy')]": [
                        {
                          "name": "dataDisks",
                          "count": "[[length(parameters('dataDisks'))]",
                          "input": {
                            "lun": "[[copyIndex('dataDisks')]",
                            "name": "[[format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                            "diskSizeGB": "[[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                            "createOption": "[[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                            "deleteOption": "[[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                            "caching": "[[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                            "managedDisk": {
                              "storageAccountType": "[[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                              "diskEncryptionSet": "[[if(contains(parameters('dataDisks')[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                            }
                          }
                        }
                      ],
                      "imageReference": "[[parameters('imageReference')]",
                      "osDisk": {
                        "name": "[[format('osdisk-01-{0}', parameters('name'))]",
                        "createOption": "[[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                        "deleteOption": "[[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                        "diskSizeGB": "[[parameters('osDisk').diskSizeGB]",
                        "caching": "[[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                        "managedDisk": {
                          "storageAccountType": "[[parameters('osDisk').managedDisk.storageAccountType]",
                          "diskEncryptionSet": "[[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), createObject('id', parameters('osDisk').managedDisk.diskEncryptionSet.id), null())]"
                        }
                      }
                    },
                    "additionalCapabilities": {
                      "ultraSSDEnabled": "[[parameters('ultraSSDEnabled')]"
                    },
                    "osProfile": {
                      "computerName": "[[variables('vmComputerNameTransformed')]",
                      "adminUsername": "[[parameters('adminUsername')]",
                      "adminPassword": "[[parameters('adminPassword')]",
                      "customData": "[[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                      "windowsConfiguration": "[[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                      "linuxConfiguration": "[[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                      "secrets": "[[parameters('certificatesToBeInstalled')]",
                      "allowExtensionOperations": "[[parameters('allowExtensionOperations')]"
                    },
                    "networkProfile": {
                      "[string('copy')]": [
                        {
                          "name": "networkInterfaces",
                          "count": "[[length(parameters('nicConfigurations'))]",
                          "input": {
                            "properties": {
                              "deleteOption": "[[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                              "primary": "[[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                            },
                            "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix, parameters('name')))]"
                          }
                        }
                      ]
                    },
                    "diagnosticsProfile": {
                      "bootDiagnostics": {
                        "enabled": "[[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                        "storageUri": "[[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                      }
                    },
                    "availabilitySet": "[[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                    "proximityPlacementGroup": "[[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                    "priority": "[[parameters('priority')]",
                    "evictionPolicy": "[[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                    "billingProfile": "[[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                    "host": "[[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                    "licenseType": "[[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                  },
                  "dependsOn": [
                    "vm_nic"
                  ]
                },
                {
                  "condition": "[[not(empty(parameters('configurationProfile')))]",
                  "type": "Microsoft.Automanage/configurationProfileAssignments",
                  "apiVersion": "2021-04-30-preview",
                  "scope": "[[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                  "name": "default",
                  "properties": {
                    "configurationProfile": "[[parameters('configurationProfile')]"
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[not(empty(parameters('lock')))]",
                  "type": "Microsoft.Authorization/locks",
                  "apiVersion": "2020-05-01",
                  "scope": "[[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                  "name": "[[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                  "properties": {
                    "level": "[[parameters('lock')]",
                    "notes": "[[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "[string('copy')]": {
                    "name": "vm_nic",
                    "count": "[[length(parameters('nicConfigurations'))]"
                  },
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "networkInterfaceName": {
                        "value": "[[format('{0}{1}', parameters('nicConfigurations')[copyIndex()].nicSuffix, parameters('name'))]"
                      },
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "location": {
                        "value": "[[parameters('location')]"
                      },
                      "tags": {
                        "value": "[[parameters('tags')]"
                      },
                      "enableIPForwarding": "[[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                      "enableAcceleratedNetworking": "[[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                      "dnsServers": "[[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                      "networkSecurityGroupResourceId": "[[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                      "ipConfigurations": {
                        "value": "[[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                      },
                      "lock": {
                        "value": "[[parameters('lock')]"
                      },
                      "diagnosticStorageAccountId": {
                        "value": "[[parameters('diagnosticStorageAccountId')]"
                      },
                      "diagnosticLogsRetentionInDays": {
                        "value": "[[parameters('diagnosticLogsRetentionInDays')]"
                      },
                      "diagnosticWorkspaceId": {
                        "value": "[[parameters('diagnosticWorkspaceId')]"
                      },
                      "diagnosticEventHubAuthorizationRuleId": {
                        "value": "[[parameters('diagnosticEventHubAuthorizationRuleId')]"
                      },
                      "diagnosticEventHubName": {
                        "value": "[[parameters('diagnosticEventHubName')]"
                      },
                      "pipDiagnosticSettingsName": {
                        "value": "[[parameters('pipDiagnosticSettingsName')]"
                      },
                      "nicDiagnosticSettingsName": {
                        "value": "[[parameters('nicDiagnosticSettingsName')]"
                      },
                      "pipdiagnosticMetricsToEnable": {
                        "value": "[[parameters('pipdiagnosticMetricsToEnable')]"
                      },
                      "pipdiagnosticLogCategoriesToEnable": {
                        "value": "[[parameters('pipdiagnosticLogCategoriesToEnable')]"
                      },
                      "nicDiagnosticMetricsToEnable": {
                        "value": "[[parameters('nicdiagnosticMetricsToEnable')]"
                      },
                      "roleAssignments": "[[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), createObject('value', parameters('nicConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]"
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "14151158611245790705"
                        }
                      },
                      "parameters": {
                        "networkInterfaceName": {
                          "type": "string"
                        },
                        "virtualMachineName": {
                          "type": "string"
                        },
                        "location": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "object"
                        },
                        "enableIPForwarding": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "enableAcceleratedNetworking": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "dnsServers": {
                          "type": "array",
                          "defaultValue": []
                        },
                        "networkSecurityGroupResourceId": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. The network security group (NSG) to attach to the network interface."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array"
                        },
                        "lock": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "diagnosticStorageAccountId": {
                          "type": "string"
                        },
                        "diagnosticLogsRetentionInDays": {
                          "type": "int"
                        },
                        "diagnosticWorkspaceId": {
                          "type": "string"
                        },
                        "diagnosticEventHubAuthorizationRuleId": {
                          "type": "string"
                        },
                        "diagnosticEventHubName": {
                          "type": "string"
                        },
                        "pipdiagnosticMetricsToEnable": {
                          "type": "array"
                        },
                        "pipdiagnosticLogCategoriesToEnable": {
                          "type": "array"
                        },
                        "nicDiagnosticMetricsToEnable": {
                          "type": "array"
                        },
                        "roleAssignments": {
                          "type": "array",
                          "defaultValue": [],
                          "metadata": {
                            "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "pipDiagnosticSettingsName": {
                          "type": "string",
                          "defaultValue": "[[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                          "metadata": {
                            "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                          }
                        },
                        "nicDiagnosticSettingsName": {
                          "type": "string",
                          "defaultValue": "[[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                          "metadata": {
                            "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                          }
                        }
                      },
                      "variables": {
                        "enableReferencedModulesTelemetry": false
                      },
                      "resources": [
                        {
                          "[string('copy')]": {
                            "name": "networkInterface_publicIPAddresses",
                            "count": "[[length(parameters('ipConfigurations'))]"
                          },
                          "condition": "[[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "name": {
                                "value": "[[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                              },
                              "diagnosticEventHubAuthorizationRuleId": {
                                "value": "[[parameters('diagnosticEventHubAuthorizationRuleId')]"
                              },
                              "diagnosticEventHubName": {
                                "value": "[[parameters('diagnosticEventHubName')]"
                              },
                              "diagnosticLogCategoriesToEnable": {
                                "value": "[[parameters('pipdiagnosticLogCategoriesToEnable')]"
                              },
                              "diagnosticLogsRetentionInDays": {
                                "value": "[[parameters('diagnosticLogsRetentionInDays')]"
                              },
                              "diagnosticMetricsToEnable": {
                                "value": "[[parameters('pipdiagnosticMetricsToEnable')]"
                              },
                              "diagnosticSettingsName": {
                                "value": "[[parameters('pipDiagnosticSettingsName')]"
                              },
                              "diagnosticStorageAccountId": {
                                "value": "[[parameters('diagnosticStorageAccountId')]"
                              },
                              "diagnosticWorkspaceId": {
                                "value": "[[parameters('diagnosticWorkspaceId')]"
                              },
                              "enableDefaultTelemetry": {
                                "value": "[[variables('enableReferencedModulesTelemetry')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "lock": {
                                "value": "[[parameters('lock')]"
                              },
                              "publicIPAddressVersion": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAddressVersion), createObject('value', 'IPv4'))]",
                              "publicIPAllocationMethod": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAllocationMethod), createObject('value', 'Static'))]",
                              "publicIPPrefixResourceId": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPPrefixResourceId), createObject('value', ''))]",
                              "roleAssignments": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                              "skuName": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuName), createObject('value', 'Standard'))]",
                              "skuTier": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuTier), createObject('value', 'Regional'))]",
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "zones": "[[if(contains(parameters('ipConfigurations')[copyIndex()], 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].zones), createObject('value', createArray()))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.19.5.34762",
                                  "templateHash": "6334341016892720558"
                                }
                              },
                              "parameters": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the Public IP Address."
                                  }
                                },
                                "publicIPPrefixResourceId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                  }
                                },
                                "publicIPAllocationMethod": {
                                  "type": "string",
                                  "defaultValue": "Dynamic",
                                  "allowedValues": [
                                    "Dynamic",
                                    "Static"
                                  ],
                                  "metadata": {
                                    "description": "Optional. The public IP address allocation method."
                                  }
                                },
                                "skuName": {
                                  "type": "string",
                                  "defaultValue": "Basic",
                                  "allowedValues": [
                                    "Basic",
                                    "Standard"
                                  ],
                                  "metadata": {
                                    "description": "Optional. Name of a public IP address SKU."
                                  }
                                },
                                "skuTier": {
                                  "type": "string",
                                  "defaultValue": "Regional",
                                  "allowedValues": [
                                    "Global",
                                    "Regional"
                                  ],
                                  "metadata": {
                                    "description": "Optional. Tier of a public IP address SKU."
                                  }
                                },
                                "zones": {
                                  "type": "array",
                                  "defaultValue": [],
                                  "metadata": {
                                    "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                  }
                                },
                                "publicIPAddressVersion": {
                                  "type": "string",
                                  "defaultValue": "IPv4",
                                  "allowedValues": [
                                    "IPv4",
                                    "IPv6"
                                  ],
                                  "metadata": {
                                    "description": "Optional. IP address version."
                                  }
                                },
                                "diagnosticLogsRetentionInDays": {
                                  "type": "int",
                                  "defaultValue": 365,
                                  "maxValue": 365,
                                  "minValue": 0,
                                  "metadata": {
                                    "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                  }
                                },
                                "diagnosticStorageAccountId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account."
                                  }
                                },
                                "diagnosticWorkspaceId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                                  }
                                },
                                "diagnosticEventHubAuthorizationRuleId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "diagnosticEventHubName": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                  }
                                },
                                "domainNameLabel": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                  }
                                },
                                "fqdn": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                  }
                                },
                                "reverseFqdn": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                  }
                                },
                                "lock": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  },
                                  "allowedValues": [
                                    "",
                                    "CanNotDelete",
                                    "ReadOnly"
                                  ]
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]",
                                  "metadata": {
                                    "description": "Optional. Location for all resources."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "defaultValue": [],
                                  "metadata": {
                                    "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "enableDefaultTelemetry": {
                                  "type": "bool",
                                  "defaultValue": true,
                                  "metadata": {
                                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "defaultValue": {},
                                  "metadata": {
                                    "description": "Optional. Tags of the resource."
                                  }
                                },
                                "diagnosticLogCategoriesToEnable": {
                                  "type": "array",
                                  "defaultValue": [
                                    "allLogs"
                                  ],
                                  "allowedValues": [
                                    "allLogs",
                                    "DDoSProtectionNotifications",
                                    "DDoSMitigationFlowLogs",
                                    "DDoSMitigationReports"
                                  ],
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                                  }
                                },
                                "diagnosticMetricsToEnable": {
                                  "type": "array",
                                  "defaultValue": [
                                    "AllMetrics"
                                  ],
                                  "allowedValues": [
                                    "AllMetrics"
                                  ],
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed."
                                  }
                                },
                                "diagnosticSettingsName": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                                  }
                                }
                              },
                              "variables": {
                                "[string('copy')]": [
                                  {
                                    "name": "diagnosticsLogsSpecified",
                                    "count": "[[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                    "input": {
                                      "category": "[[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                      "enabled": true,
                                      "retentionPolicy": {
                                        "enabled": true,
                                        "days": "[[parameters('diagnosticLogsRetentionInDays')]"
                                      }
                                    }
                                  },
                                  {
                                    "name": "diagnosticsMetrics",
                                    "count": "[[length(parameters('diagnosticMetricsToEnable'))]",
                                    "input": {
                                      "category": "[[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                      "timeGrain": null,
                                      "enabled": true,
                                      "retentionPolicy": {
                                        "enabled": true,
                                        "days": "[[parameters('diagnosticLogsRetentionInDays')]"
                                      }
                                    }
                                  }
                                ],
                                "diagnosticsLogs": "[[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true(), 'retentionPolicy', createObject('enabled', true(), 'days', parameters('diagnosticLogsRetentionInDays')))), variables('diagnosticsLogsSpecified'))]"
                              },
                              "resources": [
                                {
                                  "condition": "[[parameters('enableDefaultTelemetry')]",
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2021-04-01",
                                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                  "properties": {
                                    "mode": "Incremental",
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "resources": []
                                    }
                                  }
                                },
                                {
                                  "type": "Microsoft.Network/publicIPAddresses",
                                  "apiVersion": "2022-07-01",
                                  "name": "[[parameters('name')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "sku": {
                                    "name": "[[parameters('skuName')]",
                                    "tier": "[[parameters('skuTier')]"
                                  },
                                  "zones": "[[parameters('zones')]",
                                  "properties": {
                                    "dnsSettings": "[[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                    "publicIPAddressVersion": "[[parameters('publicIPAddressVersion')]",
                                    "publicIPAllocationMethod": "[[parameters('publicIPAllocationMethod')]",
                                    "publicIPPrefix": "[[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                    "idleTimeoutInMinutes": 4,
                                    "ipTags": []
                                  }
                                },
                                {
                                  "condition": "[[not(empty(parameters('lock')))]",
                                  "type": "Microsoft.Authorization/locks",
                                  "apiVersion": "2020-05-01",
                                  "scope": "[[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                  "name": "[[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                  "properties": {
                                    "level": "[[parameters('lock')]",
                                    "notes": "[[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                  ]
                                },
                                {
                                  "condition": "[[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                  "type": "Microsoft.Insights/diagnosticSettings",
                                  "apiVersion": "2021-05-01-preview",
                                  "scope": "[[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                  "name": "[[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                                  "properties": {
                                    "storageAccountId": "[[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                    "workspaceId": "[[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                    "eventHubAuthorizationRuleId": "[[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                    "eventHubName": "[[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                    "metrics": "[[variables('diagnosticsMetrics')]",
                                    "logs": "[[variables('diagnosticsLogs')]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                  ]
                                },
                                {
                                  "[string('copy')]": {
                                    "name": "publicIpAddress_roleAssignments",
                                    "count": "[[length(parameters('roleAssignments'))]"
                                  },
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "description": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                      "principalIds": {
                                        "value": "[[parameters('roleAssignments')[copyIndex()].principalIds]"
                                      },
                                      "principalType": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                      "roleDefinitionIdOrName": {
                                        "value": "[[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                      },
                                      "condition": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                      "delegatedManagedIdentityResourceId": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                      "resourceId": {
                                        "value": "[[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.19.5.34762",
                                          "templateHash": "7927074872480917952"
                                        }
                                      },
                                      "parameters": {
                                        "principalIds": {
                                          "type": "array",
                                          "metadata": {
                                            "description": "Required. The IDs of the principals to assign the role to."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                          }
                                        },
                                        "resourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource ID of the resource to apply the role assignment to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "allowedValues": [
                                            "ServicePrincipal",
                                            "Group",
                                            "User",
                                            "ForeignGroup",
                                            "Device",
                                            ""
                                          ],
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "defaultValue": "2.0",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "builtInRoleNames": {
                                          "Avere Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                          "Avere Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                          "Azure Center for SAP solutions administrator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b0c7e81-271f-4c71-90bf-e30bdfdbc2f7')]",
                                          "Azure Center for SAP solutions reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '05352d14-a920-4328-a0de-4cbe7430e26b')]",
                                          "Azure Center for SAP solutions service role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aabbc5dd-1af0-458b-a942-81af88f9c138')]",
                                          "Azure Kubernetes Service Policy Add-on Deployment": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                                          "Backup Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                          "Backup Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                          "Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                          "Cosmos DB Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                                          "Desktop Virtualization Virtual Machine Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                          "DevTest Labs User": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                          "DNS Resolver Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                          "DNS Zone Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                          "DocumentDB Account Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                                          "Domain Services Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                          "Domain Services Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                          "LocalNGFirewallAdministrator role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a8835c7d-b5cb-47fa-b6f0-65ea10ce07a2')]",
                                          "Log Analytics Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                          "Log Analytics Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                          "Managed Application Contributor Role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                          "Managed Application Operator Role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                          "Managed Applications Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                          "Monitoring Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                          "Monitoring Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                          "Network Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                          "Owner": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                          "Private DNS Zone Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                          "Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                          "Resource Policy Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                          "Role Based Access Control Administrator (Preview)": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                          "Site Recovery Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                          "Site Recovery Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                          "SQL Managed Instance Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                                          "SQL Security Manager": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                                          "Storage Account Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                          "Traffic Manager Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                                          "User Access Administrator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                          "Virtual Machine Administrator Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                          "Virtual Machine Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                          "Virtual Machine User Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                                          "Windows Admin Center Administrator Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "[string('copy')]": {
                                            "name": "roleAssignment",
                                            "count": "[[length(parameters('principalIds'))]"
                                          },
                                          "type": "Microsoft.Authorization/roleAssignments",
                                          "apiVersion": "2022-04-01",
                                          "scope": "[[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                          "name": "[[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                          "properties": {
                                            "description": "[[parameters('description')]",
                                            "roleDefinitionId": "[[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                            "principalId": "[[parameters('principalIds')[copyIndex()]]",
                                            "principalType": "[[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                            "condition": "[[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                            "conditionVersion": "[[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                            "delegatedManagedIdentityResourceId": "[[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "resourceGroupName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource group the public IP address was deployed into."
                                  },
                                  "value": "[[resourceGroup().name]"
                                },
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the public IP address."
                                  },
                                  "value": "[[parameters('name')]"
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the public IP address."
                                  },
                                  "value": "[[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                },
                                "ipAddress": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The public IP address of the public IP address resource."
                                  },
                                  "value": "[[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01').ipAddress, '')]"
                                },
                                "location": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The location the resource was deployed into."
                                  },
                                  "value": "[[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01', 'full').location]"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('{0}-NetworkInterface', deployment().name)]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "name": {
                                "value": "[[parameters('networkInterfaceName')]"
                              },
                              "ipConfigurations": {
                                "[string('copy')]": [
                                  {
                                    "name": "value",
                                    "count": "[[length(parameters('ipConfigurations'))]",
                                    "input": "[[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                  }
                                ]
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "diagnosticEventHubAuthorizationRuleId": {
                                "value": "[[parameters('diagnosticEventHubAuthorizationRuleId')]"
                              },
                              "diagnosticEventHubName": {
                                "value": "[[parameters('diagnosticEventHubName')]"
                              },
                              "diagnosticLogsRetentionInDays": {
                                "value": "[[parameters('diagnosticLogsRetentionInDays')]"
                              },
                              "diagnosticStorageAccountId": {
                                "value": "[[parameters('diagnosticStorageAccountId')]"
                              },
                              "diagnosticMetricsToEnable": {
                                "value": "[[parameters('nicDiagnosticMetricsToEnable')]"
                              },
                              "diagnosticSettingsName": {
                                "value": "[[parameters('nicDiagnosticSettingsName')]"
                              },
                              "diagnosticWorkspaceId": {
                                "value": "[[parameters('diagnosticWorkspaceId')]"
                              },
                              "dnsServers": "[[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                              "enableAcceleratedNetworking": {
                                "value": "[[parameters('enableAcceleratedNetworking')]"
                              },
                              "enableDefaultTelemetry": {
                                "value": "[[variables('enableReferencedModulesTelemetry')]"
                              },
                              "enableIPForwarding": {
                                "value": "[[parameters('enableIPForwarding')]"
                              },
                              "lock": {
                                "value": "[[parameters('lock')]"
                              },
                              "networkSecurityGroupResourceId": "[[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                              "roleAssignments": "[[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.19.5.34762",
                                  "templateHash": "4998852968640897249"
                                }
                              },
                              "parameters": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the network interface."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]",
                                  "metadata": {
                                    "description": "Optional. Location for all resources."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "defaultValue": {},
                                  "metadata": {
                                    "description": "Optional. Tags of the resource."
                                  }
                                },
                                "enableDefaultTelemetry": {
                                  "type": "bool",
                                  "defaultValue": true,
                                  "metadata": {
                                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                                  }
                                },
                                "enableIPForwarding": {
                                  "type": "bool",
                                  "defaultValue": false,
                                  "metadata": {
                                    "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                  }
                                },
                                "enableAcceleratedNetworking": {
                                  "type": "bool",
                                  "defaultValue": false,
                                  "metadata": {
                                    "description": "Optional. If the network interface is accelerated networking enabled."
                                  }
                                },
                                "dnsServers": {
                                  "type": "array",
                                  "defaultValue": [],
                                  "metadata": {
                                    "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                  }
                                },
                                "networkSecurityGroupResourceId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The network security group (NSG) to attach to the network interface."
                                  }
                                },
                                "auxiliaryMode": {
                                  "type": "string",
                                  "defaultValue": "None",
                                  "metadata": {
                                    "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                  },
                                  "allowedValues": [
                                    "Floating",
                                    "MaxConnections",
                                    "None"
                                  ]
                                },
                                "disableTcpStateTracking": {
                                  "type": "bool",
                                  "defaultValue": false,
                                  "metadata": {
                                    "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "metadata": {
                                    "description": "Required. A list of IPConfigurations of the network interface."
                                  }
                                },
                                "lock": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  },
                                  "allowedValues": [
                                    "",
                                    "CanNotDelete",
                                    "ReadOnly"
                                  ]
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "defaultValue": [],
                                  "metadata": {
                                    "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "diagnosticLogsRetentionInDays": {
                                  "type": "int",
                                  "defaultValue": 365,
                                  "maxValue": 365,
                                  "minValue": 0,
                                  "metadata": {
                                    "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                  }
                                },
                                "diagnosticStorageAccountId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account."
                                  }
                                },
                                "diagnosticWorkspaceId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource identifier of log analytics."
                                  }
                                },
                                "diagnosticEventHubAuthorizationRuleId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "diagnosticEventHubName": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                  }
                                },
                                "diagnosticMetricsToEnable": {
                                  "type": "array",
                                  "defaultValue": [
                                    "AllMetrics"
                                  ],
                                  "allowedValues": [
                                    "AllMetrics"
                                  ],
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed."
                                  }
                                },
                                "diagnosticSettingsName": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                                  }
                                }
                              },
                              "variables": {
                                "[string('copy')]": [
                                  {
                                    "name": "diagnosticsMetrics",
                                    "count": "[[length(parameters('diagnosticMetricsToEnable'))]",
                                    "input": {
                                      "category": "[[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                      "timeGrain": null,
                                      "enabled": true,
                                      "retentionPolicy": {
                                        "enabled": true,
                                        "days": "[[parameters('diagnosticLogsRetentionInDays')]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "resources": [
                                {
                                  "condition": "[[parameters('enableDefaultTelemetry')]",
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2021-04-01",
                                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                  "properties": {
                                    "mode": "Incremental",
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "resources": []
                                    }
                                  }
                                },
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2022-07-01",
                                  "name": "[[parameters('name')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "[string('copy')]": [
                                      {
                                        "name": "ipConfigurations",
                                        "count": "[[length(parameters('ipConfigurations'))]",
                                        "input": {
                                          "name": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                          "properties": {
                                            "primary": "[[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                            "privateIPAllocationMethod": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                            "privateIPAddress": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                            "publicIPAddress": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                            "subnet": {
                                              "id": "[[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                            },
                                            "loadBalancerBackendAddressPools": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                            "applicationSecurityGroups": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                            "applicationGatewayBackendAddressPools": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                            "gatewayLoadBalancer": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                            "loadBalancerInboundNatRules": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                            "privateIPAddressVersion": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                            "virtualNetworkTaps": "[[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                          }
                                        }
                                      }
                                    ],
                                    "auxiliaryMode": "[[parameters('auxiliaryMode')]",
                                    "disableTcpStateTracking": "[[parameters('disableTcpStateTracking')]",
                                    "dnsSettings": "[[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                    "enableAcceleratedNetworking": "[[parameters('enableAcceleratedNetworking')]",
                                    "enableIPForwarding": "[[parameters('enableIPForwarding')]",
                                    "networkSecurityGroup": "[[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                  }
                                },
                                {
                                  "condition": "[[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                  "type": "Microsoft.Insights/diagnosticSettings",
                                  "apiVersion": "2021-05-01-preview",
                                  "scope": "[[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                  "name": "[[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                                  "properties": {
                                    "storageAccountId": "[[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                    "workspaceId": "[[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                    "eventHubAuthorizationRuleId": "[[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                    "eventHubName": "[[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                    "metrics": "[[variables('diagnosticsMetrics')]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                  ]
                                },
                                {
                                  "condition": "[[not(empty(parameters('lock')))]",
                                  "type": "Microsoft.Authorization/locks",
                                  "apiVersion": "2020-05-01",
                                  "scope": "[[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                  "name": "[[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                  "properties": {
                                    "level": "[[parameters('lock')]",
                                    "notes": "[[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                  ]
                                },
                                {
                                  "[string('copy')]": {
                                    "name": "networkInterface_roleAssignments",
                                    "count": "[[length(parameters('roleAssignments'))]"
                                  },
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('{0}-NIC-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "description": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                      "principalIds": {
                                        "value": "[[parameters('roleAssignments')[copyIndex()].principalIds]"
                                      },
                                      "principalType": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                      "roleDefinitionIdOrName": {
                                        "value": "[[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                      },
                                      "condition": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                      "delegatedManagedIdentityResourceId": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                      "resourceId": {
                                        "value": "[[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.19.5.34762",
                                          "templateHash": "11217191875210502826"
                                        }
                                      },
                                      "parameters": {
                                        "principalIds": {
                                          "type": "array",
                                          "metadata": {
                                            "description": "Required. The IDs of the principals to assign the role to."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                          }
                                        },
                                        "resourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource ID of the resource to apply the role assignment to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "allowedValues": [
                                            "ServicePrincipal",
                                            "Group",
                                            "User",
                                            "ForeignGroup",
                                            "Device",
                                            ""
                                          ],
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "defaultValue": "2.0",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "builtInRoleNames": {
                                          "Avere Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                          "Avere Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                          "Azure Center for SAP solutions administrator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b0c7e81-271f-4c71-90bf-e30bdfdbc2f7')]",
                                          "Azure Center for SAP solutions reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '05352d14-a920-4328-a0de-4cbe7430e26b')]",
                                          "Azure Center for SAP solutions service role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aabbc5dd-1af0-458b-a942-81af88f9c138')]",
                                          "Azure Kubernetes Service Policy Add-on Deployment": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                                          "Backup Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                          "Backup Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                          "Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                          "Cosmos DB Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                                          "Desktop Virtualization Virtual Machine Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                          "DevTest Labs User": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                          "DNS Resolver Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                          "DNS Zone Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                          "DocumentDB Account Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                                          "Domain Services Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                          "Domain Services Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                          "LocalNGFirewallAdministrator role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a8835c7d-b5cb-47fa-b6f0-65ea10ce07a2')]",
                                          "Log Analytics Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                          "Log Analytics Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                          "Managed Application Contributor Role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                          "Managed Application Operator Role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                          "Managed Applications Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                          "Monitoring Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                          "Monitoring Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                          "Network Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                          "Owner": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                          "Private DNS Zone Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                          "Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                          "Resource Policy Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                          "Role Based Access Control Administrator (Preview)": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                          "Site Recovery Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                          "Site Recovery Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                          "SQL Managed Instance Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                                          "SQL Security Manager": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                                          "Storage Account Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                          "Traffic Manager Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                                          "User Access Administrator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                          "Virtual Machine Administrator Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                          "Virtual Machine Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                          "Virtual Machine User Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                                          "Windows Admin Center Administrator Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "[string('copy')]": {
                                            "name": "roleAssignment",
                                            "count": "[[length(parameters('principalIds'))]"
                                          },
                                          "type": "Microsoft.Authorization/roleAssignments",
                                          "apiVersion": "2022-04-01",
                                          "scope": "[[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                                          "name": "[[guid(resourceId('Microsoft.Network/networkInterfaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                          "properties": {
                                            "description": "[[parameters('description')]",
                                            "roleDefinitionId": "[[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                            "principalId": "[[parameters('principalIds')[copyIndex()]]",
                                            "principalType": "[[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                            "condition": "[[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                            "conditionVersion": "[[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                            "delegatedManagedIdentityResourceId": "[[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the deployed resource."
                                  },
                                  "value": "[[parameters('name')]"
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the deployed resource."
                                  },
                                  "value": "[[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                },
                                "resourceGroupName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource group of the deployed resource."
                                  },
                                  "value": "[[resourceGroup().name]"
                                },
                                "location": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The location the resource was deployed into."
                                  },
                                  "value": "[[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2022-07-01', 'full').location]"
                                }
                              }
                            }
                          },
                          "dependsOn": [
                            "networkInterface_publicIPAddresses"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "condition": "[[parameters('extensionAadJoinConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "AADLogin"
                      },
                      "publisher": {
                        "value": "Microsoft.Azure.ActiveDirectory"
                      },
                      "type": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                      "typeHandlerVersion": "[[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), createObject('value', '1.0'))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "settings": "[[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]"
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionDomainJoinConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "DomainJoin"
                      },
                      "publisher": {
                        "value": "Microsoft.Compute"
                      },
                      "type": {
                        "value": "JsonADDomainExtension"
                      },
                      "typeHandlerVersion": "[[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "settings": {
                        "value": "[[parameters('extensionDomainJoinConfig').settings]"
                      },
                      "protectedSettings": {
                        "value": {
                          "Password": "[[parameters('extensionDomainJoinPassword')]"
                        }
                      },
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionAntiMalwareConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "MicrosoftAntiMalware"
                      },
                      "publisher": {
                        "value": "Microsoft.Azure.Security"
                      },
                      "type": {
                        "value": "IaaSAntimalware"
                      },
                      "typeHandlerVersion": "[[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "settings": {
                        "value": "[[parameters('extensionAntiMalwareConfig').settings]"
                      },
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionMonitoringAgentConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "MicrosoftMonitoringAgent"
                      },
                      "publisher": {
                        "value": "Microsoft.EnterpriseCloud.Monitoring"
                      },
                      "type": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                      "typeHandlerVersion": "[[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.7')))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "settings": {
                        "value": {
                          "workspaceId": "[[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                        }
                      },
                      "protectedSettings": {
                        "value": {
                          "workspaceKey": "[[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                        }
                      },
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionDependencyAgentConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "DependencyAgent"
                      },
                      "publisher": {
                        "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                      },
                      "type": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                      "typeHandlerVersion": "[[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "NetworkWatcherAgent"
                      },
                      "publisher": {
                        "value": "Microsoft.Azure.NetworkWatcher"
                      },
                      "type": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                      "typeHandlerVersion": "[[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionDSCConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "DesiredStateConfiguration"
                      },
                      "publisher": {
                        "value": "Microsoft.Powershell"
                      },
                      "type": {
                        "value": "DSC"
                      },
                      "typeHandlerVersion": "[[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "settings": "[[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                      "protectedSettings": "[[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]",
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionCustomScriptConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "CustomScriptExtension"
                      },
                      "publisher": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                      "type": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                      "typeHandlerVersion": "[[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "settings": {
                        "value": {
                          "[string('copy')]": [
                            {
                              "name": "fileUris",
                              "count": "[[length(parameters('extensionCustomScriptConfig').fileData)]",
                              "input": "[[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                            }
                          ]
                        }
                      },
                      "protectedSettings": {
                        "value": "[[parameters('extensionCustomScriptProtectedSetting')]"
                      },
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
                  ]
                },
                {
                  "condition": "[[parameters('extensionAzureDiskEncryptionConfig').enabled]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "virtualMachineName": {
                        "value": "[[parameters('name')]"
                      },
                      "name": {
                        "value": "AzureDiskEncryption"
                      },
                      "publisher": {
                        "value": "Microsoft.Azure.Security"
                      },
                      "type": "[[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                      "typeHandlerVersion": "[[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                      "autoUpgradeMinorVersion": "[[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                      "enableAutomaticUpgrade": "[[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                      "forceUpdateTag": "[[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                      "settings": {
                        "value": "[[parameters('extensionAzureDiskEncryptionConfig').settings]"
                      },
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "3018691389759549519"
                        }
                      },
                      "parameters": {
                        "virtualMachineName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                          }
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the virtual machine extension."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. The location the extension is deployed to."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the extension handler publisher."
                          }
                        },
                        "type": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                          }
                        },
                        "typeHandlerVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Specifies the version of the script handler."
                          }
                        },
                        "autoUpgradeMinorVersion": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                          }
                        },
                        "forceUpdateTag": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                          }
                        },
                        "settings": {
                          "type": "object",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific settings."
                          }
                        },
                        "protectedSettings": {
                          "type": "secureObject",
                          "defaultValue": {},
                          "metadata": {
                            "description": "Optional. Any object that contains the extension specific protected settings."
                          }
                        },
                        "supressFailures": {
                          "type": "bool",
                          "defaultValue": false,
                          "metadata": {
                            "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                          }
                        },
                        "enableAutomaticUpgrade": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Compute/virtualMachines/extensions",
                          "apiVersion": "2022-11-01",
                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "publisher": "[[parameters('publisher')]",
                            "type": "[[parameters('type')]",
                            "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                            "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                            "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                            "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                            "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                            "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                            "suppressFailures": "[[parameters('supressFailures')]"
                          }
                        }
                      ],
                      "outputs": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the extension."
                          },
                          "value": "[[parameters('name')]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the extension."
                          },
                          "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                        },
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the extension was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "location": {
                          "type": "string",
                          "metadata": {
                            "description": "The location the resource was deployed into."
                          },
                          "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
                  ]
                },
                {
                  "condition": "[[not(empty(parameters('backupVaultName')))]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                  "resourceGroup": "[[parameters('backupVaultResourceGroup')]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "name": {
                        "value": "[[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                      },
                      "policyId": {
                        "value": "[[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                      },
                      "protectedItemType": {
                        "value": "Microsoft.Compute/virtualMachines"
                      },
                      "protectionContainerName": {
                        "value": "[[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                      },
                      "recoveryVaultName": {
                        "value": "[[parameters('backupVaultName')]"
                      },
                      "sourceResourceId": {
                        "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      },
                      "enableDefaultTelemetry": {
                        "value": "[[variables('enableReferencedModulesTelemetry')]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "9148923827539718769"
                        }
                      },
                      "parameters": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the resource."
                          }
                        },
                        "protectionContainerName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                          }
                        },
                        "recoveryVaultName": {
                          "type": "string",
                          "metadata": {
                            "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                          }
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]",
                          "metadata": {
                            "description": "Optional. Location for all resources."
                          }
                        },
                        "protectedItemType": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The backup item type."
                          },
                          "allowedValues": [
                            "AzureFileShareProtectedItem",
                            "AzureVmWorkloadSAPAseDatabase",
                            "AzureVmWorkloadSAPHanaDatabase",
                            "AzureVmWorkloadSQLDatabase",
                            "DPMProtectedItem",
                            "GenericProtectedItem",
                            "MabFileFolderProtectedItem",
                            "Microsoft.ClassicCompute/virtualMachines",
                            "Microsoft.Compute/virtualMachines",
                            "Microsoft.Sql/servers/databases"
                          ]
                        },
                        "policyId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. ID of the backup policy with which this item is backed up."
                          }
                        },
                        "sourceResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the resource to back up."
                          }
                        },
                        "enableDefaultTelemetry": {
                          "type": "bool",
                          "defaultValue": true,
                          "metadata": {
                            "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                          }
                        }
                      },
                      "resources": [
                        {
                          "condition": "[[parameters('enableDefaultTelemetry')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2021-04-01",
                          "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                          "properties": {
                            "mode": "Incremental",
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "resources": []
                            }
                          }
                        },
                        {
                          "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                          "apiVersion": "2023-01-01",
                          "name": "[[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                          "location": "[[parameters('location')]",
                          "properties": {
                            "protectedItemType": "[[parameters('protectedItemType')]",
                            "policyId": "[[parameters('policyId')]",
                            "sourceResourceId": "[[parameters('sourceResourceId')]"
                          }
                        }
                      ],
                      "outputs": {
                        "resourceGroupName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the Resource Group the protected item was created in."
                          },
                          "value": "[[resourceGroup().name]"
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the protected item."
                          },
                          "value": "[[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                        },
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The Name of the protected item."
                          },
                          "value": "[[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                        }
                      }
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                    "[[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
                  ]
                },
                {
                  "[string('copy')]": {
                    "name": "vm_roleAssignments",
                    "count": "[[length(parameters('roleAssignments'))]"
                  },
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2022-09-01",
                  "name": "[[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                  "properties": {
                    "expressionEvaluationOptions": {
                      "scope": "inner"
                    },
                    "mode": "Incremental",
                    "parameters": {
                      "description": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                      "principalIds": {
                        "value": "[[parameters('roleAssignments')[copyIndex()].principalIds]"
                      },
                      "principalType": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                      "roleDefinitionIdOrName": {
                        "value": "[[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                      },
                      "condition": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                      "delegatedManagedIdentityResourceId": "[[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                      "resourceId": {
                        "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      }
                    },
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.19.5.34762",
                          "templateHash": "8683447033120970865"
                        }
                      },
                      "parameters": {
                        "principalIds": {
                          "type": "array",
                          "metadata": {
                            "description": "Required. The IDs of the principals to assign the role to."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the resource to apply the role assignment to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "defaultValue": "",
                          "allowedValues": [
                            "ServicePrincipal",
                            "Group",
                            "User",
                            "ForeignGroup",
                            "Device",
                            ""
                          ],
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "defaultValue": "2.0",
                          "allowedValues": [
                            "2.0"
                          ],
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "defaultValue": "",
                          "metadata": {
                            "description": "Optional. Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "variables": {
                        "builtInRoleNames": {
                          "Avere Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                          "Avere Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                          "Azure Center for SAP solutions administrator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b0c7e81-271f-4c71-90bf-e30bdfdbc2f7')]",
                          "Azure Center for SAP solutions reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '05352d14-a920-4328-a0de-4cbe7430e26b')]",
                          "Azure Center for SAP solutions service role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aabbc5dd-1af0-458b-a942-81af88f9c138')]",
                          "Azure Kubernetes Service Policy Add-on Deployment": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                          "Compute Gallery Sharing Admin": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
                          "Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                          "Data Operator for Managed Disks": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
                          "Desktop Virtualization Power On Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                          "Desktop Virtualization Power On Off Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                          "Desktop Virtualization Virtual Machine Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                          "DevTest Labs User": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                          "Disk Backup Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
                          "Disk Pool Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
                          "Disk Restore Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
                          "Disk Snapshot Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                          "Log Analytics Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                          "Log Analytics Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                          "Managed Application Contributor Role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                          "Managed Application Operator Role": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                          "Managed Applications Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                          "Monitoring Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                          "Monitoring Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                          "Owner": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                          "Reader": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                          "Reservation Purchaser": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                          "Resource Policy Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                          "Role Based Access Control Administrator (Preview)": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                          "User Access Administrator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                          "Virtual Machine Administrator Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                          "Virtual Machine Contributor": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                          "Virtual Machine User Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                          "VM Scanner Operator": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]",
                          "Windows Admin Center Administrator Login": "[[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                        }
                      },
                      "resources": [
                        {
                          "[string('copy')]": {
                            "name": "roleAssignment",
                            "count": "[[length(parameters('principalIds'))]"
                          },
                          "type": "Microsoft.Authorization/roleAssignments",
                          "apiVersion": "2022-04-01",
                          "scope": "[[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
                          "name": "[[guid(resourceId('Microsoft.Compute/virtualMachines', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                          "properties": {
                            "description": "[[parameters('description')]",
                            "roleDefinitionId": "[[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                            "principalId": "[[parameters('principalIds')[copyIndex()]]",
                            "principalType": "[[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                            "condition": "[[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                            "conditionVersion": "[[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                            "delegatedManagedIdentityResourceId": "[[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                          }
                        }
                      ]
                    }
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                  ]
                }
              ],
              "outputs": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the VM."
                  },
                  "value": "[[parameters('name')]"
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the VM."
                  },
                  "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the resource group the VM was created in."
                  },
                  "value": "[[resourceGroup().name]"
                },
                "systemAssignedPrincipalId": {
                  "type": "string",
                  "metadata": {
                    "description": "The principal ID of the system assigned identity."
                  },
                  "value": "[[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity.principalId, '')]"
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The location the resource was deployed into."
                  },
                  "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').location]"
                }
              }
            }
          }
        },
        {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('Session-Hosts-Wait-{0}', parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "name": {
                "value": "[[format('Session-Hosts-Wait-{0}', parameters('time'))]"
              },
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "azPowerShellVersion": {
                "value": "8.3.0"
              },
              "cleanupPreference": {
                "value": "Always"
              },
              "timeout": {
                "value": "PT10M"
              },
              "scriptContent": {
                "value": "        Write-Host \"Start\"\n        Get-Date\n        Start-Sleep -Seconds 60\n        Write-Host \"Stop\"\n        Get-Date\n        "
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "5116894317712992016"
                }
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Display name of the script to be run."
                  }
                },
                "userAssignedIdentities": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The ID(s) to assign to the resource."
                  }
                },
                "location": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().location]",
                  "metadata": {
                    "description": "Optional. Location for all resources."
                  }
                },
                "kind": {
                  "type": "string",
                  "defaultValue": "AzurePowerShell",
                  "allowedValues": [
                    "AzurePowerShell",
                    "AzureCLI"
                  ],
                  "metadata": {
                    "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                  }
                },
                "azPowerShellVersion": {
                  "type": "string",
                  "defaultValue": "3.0",
                  "metadata": {
                    "description": "Optional. Azure PowerShell module version to be used."
                  }
                },
                "azCliVersion": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Azure CLI module version to be used."
                  }
                },
                "scriptContent": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                  }
                },
                "primaryScriptUri": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                  }
                },
                "environmentVariables": {
                  "type": "secureObject",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The environment variables to pass over to the script. The list is passed as an object with a key name \"secureList\" and the value is the list of environment variables (array). The list must have a 'name' and a 'value' or a 'secretValue' property for each object."
                  }
                },
                "supportingScriptUris": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                  }
                },
                "arguments": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                  }
                },
                "retentionInterval": {
                  "type": "string",
                  "defaultValue": "P1D",
                  "metadata": {
                    "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                  }
                },
                "runOnce": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                  }
                },
                "cleanupPreference": {
                  "type": "string",
                  "defaultValue": "Always",
                  "allowedValues": [
                    "Always",
                    "OnSuccess",
                    "OnExpiration"
                  ],
                  "metadata": {
                    "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                  }
                },
                "containerGroupName": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. The resource ID of the storage account to use for this deployment script. If none is provided, the deployment script uses a temporary, managed storage account."
                  }
                },
                "timeout": {
                  "type": "string",
                  "defaultValue": "PT1H",
                  "metadata": {
                    "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                  }
                },
                "baseTime": {
                  "type": "string",
                  "defaultValue": "[[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                  "metadata": {
                    "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                  }
                },
                "lock": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  },
                  "allowedValues": [
                    "",
                    "CanNotDelete",
                    "ReadOnly"
                  ]
                },
                "tags": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Tags of the resource."
                  }
                },
                "enableDefaultTelemetry": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                  }
                }
              },
              "variables": {
                "containerSettings": {
                  "containerGroupName": "[[parameters('containerGroupName')]"
                },
                "identityType": "[[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                "identity": "[[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
              },
              "resources": [
                {
                  "condition": "[[parameters('enableDefaultTelemetry')]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "mode": "Incremental",
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "resources": []
                    }
                  }
                },
                {
                  "type": "Microsoft.Resources/deploymentScripts",
                  "apiVersion": "2020-10-01",
                  "name": "[[parameters('name')]",
                  "location": "[[parameters('location')]",
                  "tags": "[[parameters('tags')]",
                  "identity": "[[variables('identity')]",
                  "kind": "[[parameters('kind')]",
                  "properties": {
                    "azPowerShellVersion": "[[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                    "azCliVersion": "[[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                    "containerSettings": "[[if(not(empty(parameters('containerGroupName'))), variables('containerSettings'), null())]",
                    "storageAccountSettings": "[[if(not(empty(parameters('storageAccountResourceId'))), if(not(empty(parameters('storageAccountResourceId'))), createObject('storageAccountKey', listKeys(parameters('storageAccountResourceId'), '2019-06-01').keys[0].value, 'storageAccountName', last(split(parameters('storageAccountResourceId'), '/'))), createObject()), null())]",
                    "arguments": "[[parameters('arguments')]",
                    "environmentVariables": "[[if(not(empty(parameters('environmentVariables'))), parameters('environmentVariables').secureList, createArray())]",
                    "scriptContent": "[[if(not(empty(parameters('scriptContent'))), parameters('scriptContent'), null())]",
                    "primaryScriptUri": "[[if(not(empty(parameters('primaryScriptUri'))), parameters('primaryScriptUri'), null())]",
                    "supportingScriptUris": "[[if(not(empty(parameters('supportingScriptUris'))), parameters('supportingScriptUris'), null())]",
                    "cleanupPreference": "[[parameters('cleanupPreference')]",
                    "forceUpdateTag": "[[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                    "retentionInterval": "[[parameters('retentionInterval')]",
                    "timeout": "[[parameters('timeout')]"
                  }
                },
                {
                  "condition": "[[not(empty(parameters('lock')))]",
                  "type": "Microsoft.Authorization/locks",
                  "apiVersion": "2020-05-01",
                  "scope": "[[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                  "name": "[[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                  "properties": {
                    "level": "[[parameters('lock')]",
                    "notes": "[[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                  ]
                }
              ],
              "outputs": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the deployment script."
                  },
                  "value": "[[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource group the deployment script was deployed into."
                  },
                  "value": "[[resourceGroup().name]"
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the deployment script."
                  },
                  "value": "[[parameters('name')]"
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The location the resource was deployed into."
                  },
                  "value": "[[reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01', 'full').location]"
                },
                "outputs": {
                  "type": "object",
                  "metadata": {
                    "description": "The output of the deployment script."
                  },
                  "value": "[[if(contains(reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01'), 'outputs'), reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01').outputs, createObject())]"
                }
              }
            }
          },
          "dependsOn": [
            "sessionHosts"
          ]
        },
        {
          "[string('copy')]": {
            "name": "sessionHostsAntimalwareExtension",
            "count": "[[length(variables('varSessionHostNames'))]"
          },
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('SH-Antimalware-{0}-{1}', variables('varSessionHostNames')[copyIndex()], parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "virtualMachineName": {
                "value": "[[variables('varSessionHostNames')[copyIndex()]]"
              },
              "name": {
                "value": "MicrosoftAntiMalware"
              },
              "publisher": {
                "value": "Microsoft.Azure.Security"
              },
              "type": {
                "value": "IaaSAntimalware"
              },
              "typeHandlerVersion": {
                "value": "1.3"
              },
              "autoUpgradeMinorVersion": {
                "value": true
              },
              "enableAutomaticUpgrade": {
                "value": false
              },
              "settings": {
                "value": {
                  "AntimalwareEnabled": true,
                  "RealtimeProtectionEnabled": "true",
                  "ScheduledScanSettings": {
                    "isEnabled": "true",
                    "day": "7",
                    "time": "120",
                    "scanType": "Quick"
                  },
                  "Exclusions": "[[if(parameters('createAvdFslogixDeployment'), createObject('Extensions', '*.vhd;*.vhdx', 'Paths', format('\"%ProgramFiles%\\FSLogix\\Apps\\frxdrv.sys;%ProgramFiles%\\FSLogix\\Apps\\frxccd.sys;%ProgramFiles%\\FSLogix\\Apps\\frxdrvvt.sys;%TEMP%\\*.VHD;%TEMP%\\*.VHDX;%Windir%\\TEMP\\*.VHD;%Windir%\\TEMP\\*.VHDX;{0}\\*\\*.VHD;{1}\\*\\*.VHDX', parameters('fslogixSharePath'), parameters('fslogixSharePath')), 'Processes', '%ProgramFiles%\\FSLogix\\Apps\\frxccd.exe;%ProgramFiles%\\FSLogix\\Apps\\frxccds.exe;%ProgramFiles%\\FSLogix\\Apps\\frxsvc.exe'), createObject())]"
                }
              },
              "enableDefaultTelemetry": {
                "value": false
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "3018691389759549519"
                }
              },
              "parameters": {
                "virtualMachineName": {
                  "type": "string",
                  "metadata": {
                    "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the virtual machine extension."
                  }
                },
                "location": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().location]",
                  "metadata": {
                    "description": "Optional. The location the extension is deployed to."
                  }
                },
                "publisher": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the extension handler publisher."
                  }
                },
                "type": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                  }
                },
                "typeHandlerVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Specifies the version of the script handler."
                  }
                },
                "autoUpgradeMinorVersion": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                  }
                },
                "forceUpdateTag": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                  }
                },
                "settings": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Any object that contains the extension specific settings."
                  }
                },
                "protectedSettings": {
                  "type": "secureObject",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Any object that contains the extension specific protected settings."
                  }
                },
                "supressFailures": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                  }
                },
                "enableAutomaticUpgrade": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                  }
                },
                "enableDefaultTelemetry": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                  }
                }
              },
              "resources": [
                {
                  "condition": "[[parameters('enableDefaultTelemetry')]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "mode": "Incremental",
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "resources": []
                    }
                  }
                },
                {
                  "type": "Microsoft.Compute/virtualMachines/extensions",
                  "apiVersion": "2022-11-01",
                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                  "location": "[[parameters('location')]",
                  "properties": {
                    "publisher": "[[parameters('publisher')]",
                    "type": "[[parameters('type')]",
                    "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                    "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                    "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                    "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                    "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                    "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                    "suppressFailures": "[[parameters('supressFailures')]"
                  }
                }
              ],
              "outputs": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the extension."
                  },
                  "value": "[[parameters('name')]"
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the extension."
                  },
                  "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the Resource Group the extension was created in."
                  },
                  "value": "[[resourceGroup().name]"
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The location the resource was deployed into."
                  },
                  "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                }
              }
            }
          },
          "dependsOn": [
            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('subscriptionId')), format('{0}', parameters('computeObjectsRgName'))), 'Microsoft.Resources/deployments', format('Session-Hosts-Wait-{0}', parameters('time')))]"
          ]
        },
        {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('Antimalware-Extension-Wait-{0}', parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "name": {
                "value": "[[format('Antimalware-Extension-Wait-{0}', parameters('time'))]"
              },
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "azPowerShellVersion": {
                "value": "8.3.0"
              },
              "cleanupPreference": {
                "value": "Always"
              },
              "timeout": {
                "value": "PT10M"
              },
              "scriptContent": {
                "value": "        Write-Host \"Start\"\n        Get-Date\n        Start-Sleep -Seconds 60\n        Write-Host \"Stop\"\n        Get-Date\n        "
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "5116894317712992016"
                }
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Display name of the script to be run."
                  }
                },
                "userAssignedIdentities": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The ID(s) to assign to the resource."
                  }
                },
                "location": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().location]",
                  "metadata": {
                    "description": "Optional. Location for all resources."
                  }
                },
                "kind": {
                  "type": "string",
                  "defaultValue": "AzurePowerShell",
                  "allowedValues": [
                    "AzurePowerShell",
                    "AzureCLI"
                  ],
                  "metadata": {
                    "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                  }
                },
                "azPowerShellVersion": {
                  "type": "string",
                  "defaultValue": "3.0",
                  "metadata": {
                    "description": "Optional. Azure PowerShell module version to be used."
                  }
                },
                "azCliVersion": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Azure CLI module version to be used."
                  }
                },
                "scriptContent": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                  }
                },
                "primaryScriptUri": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                  }
                },
                "environmentVariables": {
                  "type": "secureObject",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The environment variables to pass over to the script. The list is passed as an object with a key name \"secureList\" and the value is the list of environment variables (array). The list must have a 'name' and a 'value' or a 'secretValue' property for each object."
                  }
                },
                "supportingScriptUris": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                  }
                },
                "arguments": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                  }
                },
                "retentionInterval": {
                  "type": "string",
                  "defaultValue": "P1D",
                  "metadata": {
                    "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                  }
                },
                "runOnce": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                  }
                },
                "cleanupPreference": {
                  "type": "string",
                  "defaultValue": "Always",
                  "allowedValues": [
                    "Always",
                    "OnSuccess",
                    "OnExpiration"
                  ],
                  "metadata": {
                    "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                  }
                },
                "containerGroupName": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. The resource ID of the storage account to use for this deployment script. If none is provided, the deployment script uses a temporary, managed storage account."
                  }
                },
                "timeout": {
                  "type": "string",
                  "defaultValue": "PT1H",
                  "metadata": {
                    "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                  }
                },
                "baseTime": {
                  "type": "string",
                  "defaultValue": "[[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                  "metadata": {
                    "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                  }
                },
                "lock": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  },
                  "allowedValues": [
                    "",
                    "CanNotDelete",
                    "ReadOnly"
                  ]
                },
                "tags": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Tags of the resource."
                  }
                },
                "enableDefaultTelemetry": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                  }
                }
              },
              "variables": {
                "containerSettings": {
                  "containerGroupName": "[[parameters('containerGroupName')]"
                },
                "identityType": "[[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                "identity": "[[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
              },
              "resources": [
                {
                  "condition": "[[parameters('enableDefaultTelemetry')]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "mode": "Incremental",
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "resources": []
                    }
                  }
                },
                {
                  "type": "Microsoft.Resources/deploymentScripts",
                  "apiVersion": "2020-10-01",
                  "name": "[[parameters('name')]",
                  "location": "[[parameters('location')]",
                  "tags": "[[parameters('tags')]",
                  "identity": "[[variables('identity')]",
                  "kind": "[[parameters('kind')]",
                  "properties": {
                    "azPowerShellVersion": "[[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                    "azCliVersion": "[[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                    "containerSettings": "[[if(not(empty(parameters('containerGroupName'))), variables('containerSettings'), null())]",
                    "storageAccountSettings": "[[if(not(empty(parameters('storageAccountResourceId'))), if(not(empty(parameters('storageAccountResourceId'))), createObject('storageAccountKey', listKeys(parameters('storageAccountResourceId'), '2019-06-01').keys[0].value, 'storageAccountName', last(split(parameters('storageAccountResourceId'), '/'))), createObject()), null())]",
                    "arguments": "[[parameters('arguments')]",
                    "environmentVariables": "[[if(not(empty(parameters('environmentVariables'))), parameters('environmentVariables').secureList, createArray())]",
                    "scriptContent": "[[if(not(empty(parameters('scriptContent'))), parameters('scriptContent'), null())]",
                    "primaryScriptUri": "[[if(not(empty(parameters('primaryScriptUri'))), parameters('primaryScriptUri'), null())]",
                    "supportingScriptUris": "[[if(not(empty(parameters('supportingScriptUris'))), parameters('supportingScriptUris'), null())]",
                    "cleanupPreference": "[[parameters('cleanupPreference')]",
                    "forceUpdateTag": "[[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                    "retentionInterval": "[[parameters('retentionInterval')]",
                    "timeout": "[[parameters('timeout')]"
                  }
                },
                {
                  "condition": "[[not(empty(parameters('lock')))]",
                  "type": "Microsoft.Authorization/locks",
                  "apiVersion": "2020-05-01",
                  "scope": "[[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                  "name": "[[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                  "properties": {
                    "level": "[[parameters('lock')]",
                    "notes": "[[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                  ]
                }
              ],
              "outputs": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the deployment script."
                  },
                  "value": "[[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource group the deployment script was deployed into."
                  },
                  "value": "[[resourceGroup().name]"
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the deployment script."
                  },
                  "value": "[[parameters('name')]"
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The location the resource was deployed into."
                  },
                  "value": "[[reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01', 'full').location]"
                },
                "outputs": {
                  "type": "object",
                  "metadata": {
                    "description": "The output of the deployment script."
                  },
                  "value": "[[if(contains(reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01'), 'outputs'), reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01').outputs, createObject())]"
                }
              }
            }
          },
          "dependsOn": [
            "sessionHostsAntimalwareExtension"
          ]
        },
        {
          "[string('copy')]": {
            "name": "sessionHostsMonitoring",
            "count": "[[length(variables('varSessionHostNames'))]"
          },
          "condition": "[[parameters('deployMonitoring')]",
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('SH-Monitoring-{0}-{1}', variables('varSessionHostNames')[copyIndex()], parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "virtualMachineName": {
                "value": "[[variables('varSessionHostNames')[copyIndex()]]"
              },
              "name": {
                "value": "MicrosoftMonitoringAgent"
              },
              "publisher": {
                "value": "Microsoft.EnterpriseCloud.Monitoring"
              },
              "type": {
                "value": "MicrosoftMonitoringAgent"
              },
              "typeHandlerVersion": {
                "value": "1.0"
              },
              "autoUpgradeMinorVersion": {
                "value": true
              },
              "enableAutomaticUpgrade": {
                "value": false
              },
              "settings": {
                "value": {
                  "workspaceId": "[[if(not(empty(parameters('alaWorkspaceResourceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('alaWorkspaceResourceId'), '/')[2], split(parameters('alaWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('alaWorkspaceResourceId'), '/'))), '2021-06-01').customerId, '')]"
                }
              },
              "protectedSettings": {
                "value": {
                  "workspaceKey": "[[if(not(empty(parameters('alaWorkspaceResourceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('alaWorkspaceResourceId'), '/')[2], split(parameters('alaWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('alaWorkspaceResourceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                }
              },
              "enableDefaultTelemetry": {
                "value": false
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "3018691389759549519"
                }
              },
              "parameters": {
                "virtualMachineName": {
                  "type": "string",
                  "metadata": {
                    "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the virtual machine extension."
                  }
                },
                "location": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().location]",
                  "metadata": {
                    "description": "Optional. The location the extension is deployed to."
                  }
                },
                "publisher": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the extension handler publisher."
                  }
                },
                "type": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                  }
                },
                "typeHandlerVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Specifies the version of the script handler."
                  }
                },
                "autoUpgradeMinorVersion": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                  }
                },
                "forceUpdateTag": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                  }
                },
                "settings": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Any object that contains the extension specific settings."
                  }
                },
                "protectedSettings": {
                  "type": "secureObject",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Any object that contains the extension specific protected settings."
                  }
                },
                "supressFailures": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                  }
                },
                "enableAutomaticUpgrade": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                  }
                },
                "enableDefaultTelemetry": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                  }
                }
              },
              "resources": [
                {
                  "condition": "[[parameters('enableDefaultTelemetry')]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "mode": "Incremental",
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "resources": []
                    }
                  }
                },
                {
                  "type": "Microsoft.Compute/virtualMachines/extensions",
                  "apiVersion": "2022-11-01",
                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                  "location": "[[parameters('location')]",
                  "properties": {
                    "publisher": "[[parameters('publisher')]",
                    "type": "[[parameters('type')]",
                    "typeHandlerVersion": "[[parameters('typeHandlerVersion')]",
                    "autoUpgradeMinorVersion": "[[parameters('autoUpgradeMinorVersion')]",
                    "enableAutomaticUpgrade": "[[parameters('enableAutomaticUpgrade')]",
                    "forceUpdateTag": "[[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                    "settings": "[[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                    "protectedSettings": "[[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                    "suppressFailures": "[[parameters('supressFailures')]"
                  }
                }
              ],
              "outputs": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the extension."
                  },
                  "value": "[[parameters('name')]"
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the extension."
                  },
                  "value": "[[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the Resource Group the extension was created in."
                  },
                  "value": "[[resourceGroup().name]"
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The location the resource was deployed into."
                  },
                  "value": "[[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                }
              }
            }
          },
          "dependsOn": [
            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('subscriptionId')), format('{0}', parameters('computeObjectsRgName'))), 'Microsoft.Resources/deployments', format('Antimalware-Extension-Wait-{0}', parameters('time')))]"
          ]
        },
        {
          "condition": "[[parameters('deployMonitoring')]",
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('SH-Monitoring-Wait-{0}', parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "name": {
                "value": "[[format('SH-Monitoring-Wait-{0}', parameters('time'))]"
              },
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "azPowerShellVersion": {
                "value": "8.3.0"
              },
              "cleanupPreference": {
                "value": "Always"
              },
              "timeout": {
                "value": "PT10M"
              },
              "scriptContent": {
                "value": "        Write-Host \"Start\"\n        Get-Date\n        Start-Sleep -Seconds 60\n        Write-Host \"Stop\"\n        Get-Date\n        "
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "5116894317712992016"
                }
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Display name of the script to be run."
                  }
                },
                "userAssignedIdentities": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The ID(s) to assign to the resource."
                  }
                },
                "location": {
                  "type": "string",
                  "defaultValue": "[[resourceGroup().location]",
                  "metadata": {
                    "description": "Optional. Location for all resources."
                  }
                },
                "kind": {
                  "type": "string",
                  "defaultValue": "AzurePowerShell",
                  "allowedValues": [
                    "AzurePowerShell",
                    "AzureCLI"
                  ],
                  "metadata": {
                    "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                  }
                },
                "azPowerShellVersion": {
                  "type": "string",
                  "defaultValue": "3.0",
                  "metadata": {
                    "description": "Optional. Azure PowerShell module version to be used."
                  }
                },
                "azCliVersion": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Azure CLI module version to be used."
                  }
                },
                "scriptContent": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                  }
                },
                "primaryScriptUri": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                  }
                },
                "environmentVariables": {
                  "type": "secureObject",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. The environment variables to pass over to the script. The list is passed as an object with a key name \"secureList\" and the value is the list of environment variables (array). The list must have a 'name' and a 'value' or a 'secretValue' property for each object."
                  }
                },
                "supportingScriptUris": {
                  "type": "array",
                  "defaultValue": [],
                  "metadata": {
                    "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                  }
                },
                "arguments": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                  }
                },
                "retentionInterval": {
                  "type": "string",
                  "defaultValue": "P1D",
                  "metadata": {
                    "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                  }
                },
                "runOnce": {
                  "type": "bool",
                  "defaultValue": false,
                  "metadata": {
                    "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                  }
                },
                "cleanupPreference": {
                  "type": "string",
                  "defaultValue": "Always",
                  "allowedValues": [
                    "Always",
                    "OnSuccess",
                    "OnExpiration"
                  ],
                  "metadata": {
                    "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                  }
                },
                "containerGroupName": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. The resource ID of the storage account to use for this deployment script. If none is provided, the deployment script uses a temporary, managed storage account."
                  }
                },
                "timeout": {
                  "type": "string",
                  "defaultValue": "PT1H",
                  "metadata": {
                    "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                  }
                },
                "baseTime": {
                  "type": "string",
                  "defaultValue": "[[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                  "metadata": {
                    "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                  }
                },
                "lock": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  },
                  "allowedValues": [
                    "",
                    "CanNotDelete",
                    "ReadOnly"
                  ]
                },
                "tags": {
                  "type": "object",
                  "defaultValue": {},
                  "metadata": {
                    "description": "Optional. Tags of the resource."
                  }
                },
                "enableDefaultTelemetry": {
                  "type": "bool",
                  "defaultValue": true,
                  "metadata": {
                    "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                  }
                }
              },
              "variables": {
                "containerSettings": {
                  "containerGroupName": "[[parameters('containerGroupName')]"
                },
                "identityType": "[[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                "identity": "[[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
              },
              "resources": [
                {
                  "condition": "[[parameters('enableDefaultTelemetry')]",
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "[[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                  "properties": {
                    "mode": "Incremental",
                    "template": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "resources": []
                    }
                  }
                },
                {
                  "type": "Microsoft.Resources/deploymentScripts",
                  "apiVersion": "2020-10-01",
                  "name": "[[parameters('name')]",
                  "location": "[[parameters('location')]",
                  "tags": "[[parameters('tags')]",
                  "identity": "[[variables('identity')]",
                  "kind": "[[parameters('kind')]",
                  "properties": {
                    "azPowerShellVersion": "[[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                    "azCliVersion": "[[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                    "containerSettings": "[[if(not(empty(parameters('containerGroupName'))), variables('containerSettings'), null())]",
                    "storageAccountSettings": "[[if(not(empty(parameters('storageAccountResourceId'))), if(not(empty(parameters('storageAccountResourceId'))), createObject('storageAccountKey', listKeys(parameters('storageAccountResourceId'), '2019-06-01').keys[0].value, 'storageAccountName', last(split(parameters('storageAccountResourceId'), '/'))), createObject()), null())]",
                    "arguments": "[[parameters('arguments')]",
                    "environmentVariables": "[[if(not(empty(parameters('environmentVariables'))), parameters('environmentVariables').secureList, createArray())]",
                    "scriptContent": "[[if(not(empty(parameters('scriptContent'))), parameters('scriptContent'), null())]",
                    "primaryScriptUri": "[[if(not(empty(parameters('primaryScriptUri'))), parameters('primaryScriptUri'), null())]",
                    "supportingScriptUris": "[[if(not(empty(parameters('supportingScriptUris'))), parameters('supportingScriptUris'), null())]",
                    "cleanupPreference": "[[parameters('cleanupPreference')]",
                    "forceUpdateTag": "[[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                    "retentionInterval": "[[parameters('retentionInterval')]",
                    "timeout": "[[parameters('timeout')]"
                  }
                },
                {
                  "condition": "[[not(empty(parameters('lock')))]",
                  "type": "Microsoft.Authorization/locks",
                  "apiVersion": "2020-05-01",
                  "scope": "[[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                  "name": "[[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                  "properties": {
                    "level": "[[parameters('lock')]",
                    "notes": "[[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                  },
                  "dependsOn": [
                    "[[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                  ]
                }
              ],
              "outputs": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the deployment script."
                  },
                  "value": "[[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                },
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource group the deployment script was deployed into."
                  },
                  "value": "[[resourceGroup().name]"
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the deployment script."
                  },
                  "value": "[[parameters('name')]"
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The location the resource was deployed into."
                  },
                  "value": "[[reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01', 'full').location]"
                },
                "outputs": {
                  "type": "object",
                  "metadata": {
                    "description": "The output of the deployment script."
                  },
                  "value": "[[if(contains(reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01'), 'outputs'), reference(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), '2020-10-01').outputs, createObject())]"
                }
              }
            }
          },
          "dependsOn": [
            "sessionHostsMonitoring"
          ]
        },
        {
          "[string('copy')]": {
            "name": "configureFsLogixAvdHosts",
            "count": "[[length(variables('varSessionHostNames'))]"
          },
          "condition": "[[parameters('createAvdFslogixDeployment')]",
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('Fsl-Conf-{0}-{1}', variables('varSessionHostNames')[copyIndex()], parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "name": {
                "value": "[[variables('varSessionHostNames')[copyIndex()]]"
              },
              "file": {
                "value": "[[parameters('fsLogixScriptFile')]"
              },
              "fsLogixScriptArguments": {
                "value": "[[parameters('fsLogixScriptArguments')]"
              },
              "baseScriptUri": {
                "value": "[[parameters('fslogixScriptUri')]"
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "14552250596555087478"
                }
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Extension deployment name."
                  }
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "Location where to deploy compute services."
                  }
                },
                "baseScriptUri": {
                  "type": "string",
                  "metadata": {
                    "description": "URI for FSlogix configuration script."
                  }
                },
                "file": {
                  "type": "string",
                  "metadata": {
                    "description": "FSlogix configuration script file name."
                  }
                },
                "fsLogixScriptArguments": {
                  "type": "string",
                  "metadata": {
                    "description": "Configuration arguments for FSlogix."
                  }
                }
              },
              "resources": [
                {
                  "type": "Microsoft.Compute/virtualMachines/extensions",
                  "apiVersion": "2022-08-01",
                  "name": "[[format('{0}/FSlogixSetup', parameters('name'))]",
                  "location": "[[parameters('location')]",
                  "properties": {
                    "publisher": "Microsoft.Compute",
                    "type": "CustomScriptExtension",
                    "typeHandlerVersion": "1.10",
                    "autoUpgradeMinorVersion": true,
                    "settings": {},
                    "protectedSettings": {
                      "fileUris": "[[array(parameters('baseScriptUri'))]",
                      "commandToExecute": "[[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('file'), parameters('fsLogixScriptArguments'))]"
                    }
                  }
                }
              ]
            }
          },
          "dependsOn": [
            "sessionHosts",
            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('subscriptionId')), format('{0}', parameters('computeObjectsRgName'))), 'Microsoft.Resources/deployments', format('SH-Monitoring-Wait-{0}', parameters('time')))]"
          ]
        },
        {
          "[string('copy')]": {
            "name": "addAvdHostsToHostPool",
            "count": "[[length(variables('varSessionHostNames'))]"
          },
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2022-09-01",
          "name": "[[format('HP-Join-{0}-to-HP-{1}', variables('varSessionHostNames')[copyIndex()], parameters('time'))]",
          "subscriptionId": "[[format('{0}', parameters('subscriptionId'))]",
          "resourceGroup": "[[format('{0}', parameters('computeObjectsRgName'))]",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {
              "location": {
                "value": "[[parameters('sessionHostLocation')]"
              },
              "hostPoolToken": {
                "value": "[[parameters('hostPoolToken')]"
              },
              "name": {
                "value": "[[variables('varSessionHostNames')[copyIndex()]]"
              },
              "hostPoolName": {
                "value": "[[parameters('hostPoolName')]"
              },
              "avdAgentPackageLocation": {
                "value": "[[parameters('avdAgentPackageLocation')]"
              }
            },
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "metadata": {
                "_generator": {
                  "name": "bicep",
                  "version": "0.19.5.34762",
                  "templateHash": "16200578597975877387"
                }
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Extension deployment name."
                  }
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "Location where to deploy compute services."
                  }
                },
                "avdAgentPackageLocation": {
                  "type": "string",
                  "metadata": {
                    "description": "Location for the AVD agent installation package."
                  }
                },
                "hostPoolName": {
                  "type": "string",
                  "metadata": {
                    "description": "AVD Host Pool Name"
                  }
                },
                "systemData": {
                  "type": "object",
                  "defaultValue": {}
                },
                "hostPoolToken": {
                  "type": "string",
                  "metadata": {
                    "description": "AVD Host Pool registration token"
                  }
                }
              },
              "resources": [
                {
                  "type": "Microsoft.Compute/virtualMachines/extensions",
                  "apiVersion": "2022-08-01",
                  "name": "[[format('{0}/HostPoolRegistration', parameters('name'))]",
                  "location": "[[parameters('location')]",
                  "properties": {
                    "publisher": "Microsoft.PowerShell",
                    "type": "DSC",
                    "typeHandlerVersion": "2.73",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                      "modulesUrl": "[[parameters('avdAgentPackageLocation')]",
                      "configurationFunction": "Configuration.ps1\\AddSessionHost",
                      "properties": {
                        "hostPoolName": "[[parameters('hostPoolName')]",
                        "registrationInfoToken": "[[parameters('hostPoolToken')]",
                        "aadJoin": false,
                        "sessionHostConfigurationLastUpdateTime": "[[if(contains(parameters('systemData'), 'hostpoolUpdate'), parameters('systemData').sessionHostConfigurationVersion, '')]"
                      }
                    }
                  }
                }
              ]
            }
          },
          "dependsOn": [
            "configureFsLogixAvdHosts",
            "sessionHosts",
            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('subscriptionId')), format('{0}', parameters('computeObjectsRgName'))), 'Microsoft.Resources/deployments', format('SH-Monitoring-Wait-{0}', parameters('time')))]"
          ]
        }
      ]
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2022-02-01",
      "name": "[format('{0}/{1}', 'spec-avd-session-hosts', 'deployTemplateSpecVersion')]",
      "location": "[parameters('Location')]",
      "properties": {
        "mainTemplate": "[variables('$fxv#0')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', 'spec-avd-session-hosts')]"
      ]
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2022-02-01",
      "name": "spec-avd-session-hosts",
      "location": "[parameters('Location')]",
      "properties": {
        "description": "This is the template used by AVD Replacement Plan to deploy session hosts.",
        "displayName": "AVD Session Host Template"
      }
    }
  ]
}